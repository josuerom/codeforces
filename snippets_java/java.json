{ // @author josuerom
	"System.out.print()": {
		"prefix": "s",
		"body": [
			"System.out.print($1);"
		],
		"description": "Standard data output"
	},

	"System.out.println()": {
		"prefix": "ss",
		"body": [
			"System.out.println($1);"
		],
		"description": "Standard output with line break"
	},

	"System.out.prinf()": {
		"prefix": "sf",
		"body": [
			"System.out.printf($1, $2);"
		],
		"description": "Formatted standard output"
	},

	"Scanner(System.in)": {
		"prefix": "sc",
		"body": [
			"Scanner sc = new Scanner(System.in);$1"
		],
		"description": "Standard input using the Scanner method"
	},

	"BufferedReader(new InputStreamReader(System.in))": {
		"prefix": "buffer",
		"body": [
			"BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));$1"
		],
		"description": "Improved standard input using the (BufferedReader, InputStreamReader, IOException) methods"
	},

	"Main method": {
		"prefix": "main",
		"body": [
			"public static void main(String[] args) {",
			"\t$1",
			"}"
		],
		"description": "This is the main method that java executes"
	},

	"public static void nameMethod": {
		"prefix": "psv",
		"body": [
			"public static void ${1:nameMethod}($2) {",
			"}"
		],
		"description": "Method I use most often"
	},

	"Method template": {
		"prefix": "me",
		"body": [
			"public ${1:static} ${2:void} ${3:name}($4) {",
			"}"
		],
		"description": "Template for create methods"
	},

	"try catch": {
		"prefix": "try",
		"body": [
			"try {",
			"\t$1",
			"} catch (${2:Exeption} e) {",
			"\te.printStackTrace();",
			"}"
		],
		"description": "Methods for handling exceptions"
	},

	"catch": {
		"prefix": "cat",
		"body": [
			"catch ($1 e) {",
			"}"
		],
	},

	"if": {
		"prefix": "if",
		"body": [
			"if (${1:condition}) {",
			"}"
		],
	},

	"if else": {
		"prefix": "ifel",
		"body": [
			"if ($1) {",
			"} else {$2",
			"}"
		],
	},

	"do while": {
		"prefix": "do",
		"body": [
			"do {\n\t$1",
			"} while (${2:condition});"
		],
	},

	"while": {
		"prefix": "wh",
		"body": [
			"while ($1) {$2",
			"}"
		],
	},

	"for simple": {
		"prefix": "for",
		"body": [
			"for (int i = 0; i < $1; i++) {",
			"}"
		],
	},

	"for iterator": {
		"prefix": "fori",
		"body": [
			"for (int ${1:i} = 0; ${1:i} < $2; ${1:i}++) {\n\t$3",
			"}"
		],
	},

	"for each": {
		"prefix": "fore",
		"body": [
			"for (${1:int} e : $2) {",
			"}"
		],
	},

	"switch": {
		"prefix": "sw",
		"body": [
			"switch ($1) {",
			"\tcase 1: $2;",
			"\t\tbreak;",
			"\tdefault:",
			"\t\tSystem.err.println('ERROR. Debe elegir una de las opción válidas.');",
			"}"
		],
	},

	"Ternary operator": {
		"prefix": "ter",
		"body": [
			"${1:boolean name} = (${2:condition}) ? $3 : $4;"
		],
	},

	"Object creation": {
		"prefix": "obj",
		"body": [
			"${1:nameClass} ${2:value} = new ${1:nameConstructor}($3);"
		],
	},

	"Constructor ()": {
		"prefix": "constructor",
		"body": [
			"public ${1:nameClass}($2) {",
			"\tthis.$3 = $3;",
			"}"
		],
	},

	"import": {
		"prefix": "im",
		"body": [
			"import java.$1;",
		],
		"description": "Import packages"
	},

	"JavaClass Template": {
		"prefix": "javaclass",
		"body": [
			"public class ${TM_FILENAME_BASE} {",
			"\t$1",
			"}"
		],
		"description": "JavaClass template"
	},

	"JavaMainClass Template": {
		"prefix": "javamainclass",
		"body": [
			"public class ${TM_FILENAME_BASE} {\n",
			"\tpublic static void main(String[] args) {",
			"\t\t$1",
			"\t}",
			"}"
		],
		"description": "JavaMainClass template"
	},

	"JavaDocs": {
		"prefix": "doc",
		"body": [
			"/**",
			"  * @author josuerom",
			"  * @created ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
			"*/"
		],
		"description": "JavaDocs template"
	},

	"Arrays()": {
		"prefix": "arr",
		"body": [
			"Arrays.$1($2);"
		],
	},

	"Read Int Scanner()": {
		"prefix": "rd",
		"body": [
			"sc.nextInt();"
		],
	},

	"Plantilla No. 2": {
		"prefix": "template.java",
		"body": [
			"/**",
			" * @author:          josuerom",
			" * @created:     ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
			"*/",
			"import java.util.*;",
			"import static java.lang.Math.*;",
			"",
			"public class ${TM_FILENAME_BASE} {",
			"\tpublic static void main(String[] args) {",
			"\t\tScanner sc = new Scanner(System.in);",
			"\t\tint $3;",
			"\t}",
			"}"
		],
	},

	"Plantilla No. 1": {
		"prefix": "java_template_to_compete",
		"body": [
			"/*********************************************",
			" * @author:           josuerom               *",
			" * @created:     ${CURRENT_DATE}/${CURRENT_MONTH_NAME_SHORT}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}          *",
			"*********************************************/",
			"import java.io.BufferedReader;",
			"import java.io.IOException;",
			"import java.io.InputStreamReader;",
			"import java.util.Scanner;",
			"import java.util.Arrays;",
			"import static java.lang.Math.*;",
			"",
			"public class ${TM_FILENAME_BASE} {",
			"\tpublic static void main(String[] args) {",
			"\t\tpc2Read();",
			"\t}",
			"",
			"\tpublic static void solve() {",
			"\t}",
			"",
			"\tpublic static void pc2Read() {",
			"\t\tint arr[], tc$1;",
			"",
			"\t\tBufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));",
			"",
			"\t\ttry {",
			"\t\t\ttc = Integer.valueOf(buffer.readLine());\n",
			"\t\t\twhile (tc-- > 0) {",
			"\t\t\t\tline = buffer.readLine();",
			"\t\t\t\tarr = Arrays.stream(line.substring(0).split(\" \")).map(String::trim)",
         		"\t\t\t\t\t.mapToInt(Integer::parseInt).toArray();",
			"\t\t\t\tsolve(arr);$2",
			"\t\t\t}",
			"\t\t\tbuffer.close();",
			"\t\t} catch (NullPointerException e) {",
			"\t\t\te.printStackTrace();",
			"\t\t} catch (IOException e) {",
			"\t\t\te.printStackTrace();",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "Plantilla de Java para competencias"
	},
}
