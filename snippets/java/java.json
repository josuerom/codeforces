{ // @author josuerom
	"System.out.print()": {
		"prefix": "s",
		"body": [
			"System.out.print($1);"
		],
		"description": "Standard data output"
	},

	"System.out.println()": {
		"prefix": "ss",
		"body": [
			"System.out.println($1);"
		],
		"description": "Standard output with line break"
	},

	"System.out.prinf()": {
		"prefix": "sf",
		"body": [
			"System.out.printf(\"%$1\", $2);"
		],
		"description": "Formatted standard output"
	},

	"Scanner(System.in)": {
		"prefix": "sc",
		"body": [
			"Scanner sc = new Scanner(System.in);$1"
		],
		"description": "Standard input using the Scanner method"
	},

	"BufferedReader(new InputStreamReader(System.in))": {
		"prefix": "buffer",
		"body": [
			"BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));$1"
		],
		"description": "Improved standard input using the (BufferedReader, InputStreamReader, IOException) methods"
	},

	"Main method": {
		"prefix": "fm",
		"body": [
			"public static void main(String[] args) {",
			"\t$1",
			"}"
		],
		"description": "This is the main method that java executes"
	},

	"public static void nameMethod": {
		"prefix": "psv",
		"body": [
			"public static void ${1:nameMethod}($2) {",
			"}"
		],
		"description": "Method I use most often"
	},

	"Method template": {
		"prefix": "me",
		"body": [
			"public ${1:static} ${2:void} ${3:name}($4) {",
			"}"
		],
		"description": "Template for create methods"
	},

	"try catch": {
		"prefix": "try",
		"body": [
			"try {",
			"\t$1",
			"} catch (${2:Exeption} e) {",
			"\te.printStackTrace();",
			"}"
		],
		"description": "Methods for handling exceptions"
	},

	"catch": {
		"prefix": "cat",
		"body": [
			"catch ($1 e) {",
			"}"
		],
	},

	"if": {
		"prefix": "if",
		"body": [
			"if (${1:condition}) $2"
		],
	},

	"if else": {
		"prefix": "ifel",
		"body": [
			"if ($1) {",
			"} else {$2",
			"}"
		],
	},

	"do while": {
		"prefix": "do",
		"body": [
			"do {\n\t$1",
			"} while (${2:condition});"
		],
	},

	"while": {
		"prefix": "wh",
		"body": [
			"while ($1) {$2",
			"}"
		],
	},

	"read test cases": {
		"prefix": "tt",
		"body": [
			"$int$1 tt = sc.nextInt();",
			"while (tt-- > 0) {",
			"\t$2",
			"}"
		],
	},

	"for simple": {
		"prefix": "for",
		"body": [
			"for (int i = 0; i < $1; i++) {",
			"}"
		],
	},

	"for iterator": {
		"prefix": "fori",
		"body": [
			"for (int ${1:i} = 0; ${1:i} < $2; ${1:i}++) {",
			"}"
		],
	},

	"for each": {
		"prefix": "fore",
		"body": [
			"for (${1:int} e : $2) {",
			"}"
		],
	},

	"switch": {
		"prefix": "sw",
		"body": [
			"switch ($1) {",
			"\tcase 1: $2;",
			"\t\tbreak;",
			"\tdefault:",
			"\t\tSystem.err.println('ERROR. Debe elegir una de las opción válidas.');",
			"}"
		],
	},

	"Ternary operator": {
		"prefix": "ter",
		"body": [
			"${1:boolean name} = (${2:condition}) ? $3 : $4;"
		],
	},

	"Object creation": {
		"prefix": "obj",
		"body": [
			"${1:nameClass} ${2:value} = new ${1:nameConstructor}($3);"
		],
	},

	"Constructor ()": {
		"prefix": "constructor",
		"body": [
			"public ${1:nameClass}($2) {",
			"\tthis.$3 = $3;",
			"}"
		],
	},

	"import": {
		"prefix": "ii",
		"body": [
			"import java.$1;",
		],
		"description": "Import packages"
	},

	"JavaClass Template": {
		"prefix": "class",
		"body": [
			"public class ${TM_FILENAME_BASE} {",
			"\t$1",
			"}"
		],
		"description": "JavaClass template"
	},

	"JavaMainClass Template": {
		"prefix": "mainclass",
		"body": [
			"public class ${TM_FILENAME_BASE} {\n",
			"\tpublic static void main(String[] args) {",
			"\t\t$1",
			"\t}",
			"}"
		],
		"description": "JavaMainClass template"
	},

	"JavaDocs": {
		"prefix": "author",
		"body": [
			"/**",
			" *  author:  josuerom",
			" *  created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
			"**/"
		],
		"description": "Encabezado"
	},

	"Arrays()": {
		"prefix": "arr",
		"body": [
			"Arrays.$1($2);"
		],
	},

	"Read Int Scanner()": {
		"prefix": "rdi",
		"body": [
			"sc.nextInt();"
		],
	},

	"Read String Scanner()": {
		"prefix": "rds",
		"body": [
			"sc.nextLine();"
		],
	},

	"Read String-N Scanner()": {
		"prefix": "rdsn",
		"body": [
			"sc.next();"
		],
	},

	"Template 1 CP": {
		"prefix": "template1.java",
		"body": [
			"/**",
			" *  author:  josuerom",
			" *  created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
			"**/",
			"import java.io.*;",
			"import java.util.StringTokenizer;",
			"import java.lang.StringBuilder;",
			"import java.util.Arrays;",
			"import static java.lang.Math.*;\n",
			"public class ${TM_FILENAME_BASE} {\n",
			"\tpublic static void main(String[] args) throws IOException {",
			"\t\tScanner sc = new Scanner();",
			"\t\tPrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));",
			"\t\tint tt = Integer.parseInt(sc.next());",
			"\t\twhile (tt-- > 0) {",
			"\t\t\t${1:Write solve!}",
			"\t\t}",
			"\t\tpr.close();",
			"\t}\n",
			"\tstatic class Scanner {",
			"\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));",
			"\t\tStringTokenizer st = new StringTokenizer(\"\");",
			"\t\tint spaces = 0;\n",
			"\t\tpublic String nextLine() throws IOException {",
			"\t\t\tif (spaces-- > 0) return \"\";",
			"\t\t\telse if (st.hasMoreTokens()) return new StringBuilder(st.nextToken(\"\\n\")).toString();",
			"\t\t\treturn br.readLine();",
			"\t\t}\n",
			"\t\tpublic String next() throws IOException {",
			"\t\t\tspaces = 0;",
			"\t\t\twhile (!st.hasMoreTokens()) st = new StringTokenizer(br.readLine());",
			"\t\t\treturn st.nextToken();",
			"\t\t}\n",
			"\t\tpublic boolean hasNext() throws IOException {",
			"\t\t\twhile (!st.hasMoreTokens()) {",
			"\t\t\t\tString line = br.readLine();",
			"\t\t\t\tif (line == null) return false;",
			"\t\t\t\tif (line.equals(\"\")) spaces = Math.max(spaces, 0) + 1;",
			"\t\t\t\tst = new StringTokenizer(line);",
			"\t\t\t}",
			"\t\t\treturn true;",
			"\t\t}",
			"\t}",
			"}",
		],
		"description": "Plantilla optima",
	},

	"Template 2 CP": {
		"prefix": "template2.java",
		"body": [
			"/**",
			" *  author:  josuerom",
			" *  created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
			"**/",
			"import java.util.Scanner;\n",
			"public class ${TM_FILENAME_BASE} {",
			"\tpublic static void main(String[] args) {",
			"\t\tScanner sc = new Scanner(System.in);",
			"\t\t$1",
			"\t\tsc.close();",
			"\t\tSystem.out.close();",
			"\t}",
			"}"
		],
		"description": "Plantilla liviana",
	},

	"Template 3 CP": {
		"prefix": "template3.java",
		"body": [
			"/**",
			" *  author:  josuerom",
			" *  created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
			"**/",
			"import static java.lang.Math.*;",
			"import java.math.BigInteger;",
			"import java.util.Scanner;",
			"import java.util.Arrays;\n",
			"public class ${TM_FILENAME_BASE} {",
			"\tpublic static void main(String[] args) {",
			"\t\tstandardInput();",
			"\t}\n",
			"\tpublic static void solve(int[] p) {$2",
			"\t}\n",
			"\tpublic static void standardInput() {",
			"\t\tScanner sc = new Scanner(System.in);",
			"\t\tint tt, n, vi[];",
			"\t\ttt = sc.nextInt();",
			"\t\twhile (tt-- > 0) {",
			"\t\t\tn = sc.nextInt();",
			"\t\t\tvi = new int[n];",
			"\t\t\tfor (int i = 0; i < n$1; i++) {",
			"\t\t\t\tvi[i] = sc.nextInt();",
			"\t\t\t}",
			"\t\t\tsolve(vi);",
			"\t\t}",
			"\t\tsc.close();",
			"\t\tSystem.out.close();",
			"\t}",
			"}"
		],
		"description": "Plantilla estructurada",
	},
}
