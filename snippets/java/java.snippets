priority -50

global !p
def junit(snip):
	if snip.opt("g:ultisnips_java_junit", "") == "3":
		snip += ""
	else:
		snip.rv += "@Test\n\t"

def nl(snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "
def getArgs(group):
	import re
	word = re.compile('[a-zA-Z0-9><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]
endglobal

###########################################################################
#                             Java Snippets                               #
###########################################################################

snippet sleep "try sleep catch" b
try {
	Thread.sleep(${1:1000});
} catch (InterruptedException e){
	e.printStackTrace();
}
endsnippet

## Estructuras para instancias
snippet newi "new primitive or int" b
${1:nameClass} ${2:object} = new ${3:nameClass}();$0
endsnippet

snippet newo "new Object or variable" b
${1:Object} ${2:var} = new ${1}($3);$0
endsnippet

## Palabras reservadas
snippet f "field" b
${1:private} ${2:String} ${3:`!p snip.rv = t[2].lower()`};
endsnippet

snippet ab "abstract" b
abstract $0
endsnippet

snippet sy "synchronized" b
synchronized $0
endsnippet

snippet br "break"
break;
endsnippet

snippet inst "instanceof" b
instanceof$0
endsnippet

snippet pk "package" b
package $0
endsnippet

snippet re "return" b
return $0;
endsnippet

snippet as "assert" b
assert ${1:test}${2/(.+)/(?1: \: ")/}${2:Failure message}${2/(.+)/(?1:")/};
endsnippet

snippet at "assert true" b
assertTrue(${1:actual});
endsnippet

snippet af "assert false" b
assertFalse(${1:actual});
endsnippet

snippet ae "assert equals" b
assertEquals(${1:expected}, ${2:actual});
endsnippet

snippet ca "catch" b
catch (${1:Exception} ${2:e})`!p nl(snip)`{
   $0
}
endsnippet

snippet cle "class extends" b
public class `!p snip.rv = snip.basename` extends ${1:parentClass}{
   $0
}
endsnippet

snippet cli "class implements" b
public class `!p snip.rv = snip.basename` implements ${1:parentClass} }{
   $0
}
endsnippet

snippet clc "clase inteligente con constructor, setters y getters" b
public class `!p snip.rv = snip.basename` {
`!p args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($1) {`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis." + i[1] + " = " + i[1] + ";"
if len(args) == 0:
	snip.rv += "\n"`
	}$0
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tpublic void set" + camel(i[1]) + "(" + i[0] + " " + i[1] + ") {\n" + "\
	\tthis." + i[1] + " = " + i[1] + ";\n\t}\n"

	snip.rv += "\n\tpublic " + i[0] + " get" + camel(i[1]) + "() {\n\
	\treturn " + i[1] + ";\n\t}\n"
`
}
endsnippet

snippet clc "clase inteligente con constructor" b
public class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($1) {`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis.%s = %s;" % (i[1], i[1])
if len(args) == 0:
	snip.rv += "\n"`
	}
}
endsnippet

## JavaMainClass
snippet mainclass "JavaMainClass" b
/**
 *   author:  josuerom
 *   created: `!v strftime("%e/%B/%Y - %R")`
**/
package ${1:interfaz};

import java.util.Scanner;

public class `!p snip.rv = snip.basename` {
   public static void main (String[] args) {
      $2
   }
}
endsnippet

## JavaClass
snippet class "JavaClass" b
package ${1:mundo};

public class `!p snip.rv = snip.basename` {
   /* Atributos */
   $2

   /* Constructor */
   public `!p snip.rv = snip.basename`($3) {
      this.$4 = $4;
   }

   /* Métodos */
}
endsnippet

snippet pcl "public class" b
public class `!p snip.rv = snip.basename` {
   $0
}
endsnippet

snippet cl "class" b
class `!p snip.rv = snip.basename` {
   $0
}
endsnippet

snippet co "atributo constante de tipo String" b
public static final String ${1:var} = "$2";$0
endsnippet

snippet const "declarar variale constante" b
public static final ${1:int} ${2:var} = $3;
endsnippet

snippet de "default" b
default:
   ${1:System.err.println("ERROR. Ingrese una opción válida.");}
endsnippet

## Estructuras de condicionales
snippet eli "else if"
else if ($1)`!p nl(snip)`{
	$2
}
endsnippet

snippet el "else" w
else`!p nl(snip)`{
	$2
}
endsnippet

snippet if "if" b
if ($1) $2
endsnippet

## Estructuras de bucles
snippet fore "for (each)" b
for (${1:int} e : ${2:array})`!p nl(snip)` {
	$0
}
endsnippet

snippet fori "fori" b
for (int i$1 = 0; i$1 < ${2:n}; i$1++)`!p nl(snip)`{
	$0
}
endsnippet

snippet for "for" b
for (int i = 0; i < $1; i++)`!p nl(snip)`{
	$0
}
endsnippet

## Utilidades
snippet in "interface" b
interface `!p snip.rv = snip.basename` extends ${1:Parent} }{
	$0
}
endsnippet

snippet thiscons "constructor call or setter body"
this.${1:var} = $1;
endsnippet

snippet list "Collections List" b
List<${1:String}> ${2:list} = new ${3:Array}List<$1>();
endsnippet

snippet map "Collections Map" b
Map<${1:String}, ${2:String}> ${3:map} = new ${4:Hash}Map<$1, $2>();
endsnippet

snippet set "Collections Set" b
Set<${1:String}> ${2:set} = new ${3:Hash}Set<$1>();
endsnippet

snippet S "String" b
String $1 = "";
endsnippet

snippet cons "Constructor" b
public `!p snip.rv = snip.basename`(${1:var local}) {
	$0
}
endsnippet

snippet cn "constructor, \w fields + assigments" b
`!p args = getArgs(t[1])
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
public `!p snip.rv = snip.basename or "unknown"`($1) {`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis.%s = %s;" % (i[1], i[1])
if len(args) == 0:
	snip.rv += "\n"`
}
endsnippet

## Libreria
snippet im "import" b
import $0;
endsnippet
snippet ijb "java.beans." i
import java.beans.$0;
endsnippet
snippet iji "java.io" i
import java.io.$0;
endsnippet
snippet ijm "java.math" i
import java.math.$0;
endsnippet
snippet ijn "java.net." i
import java.net.$0;
endsnippet
snippet iju "java.util."  i
import java.util.$0;
endsnippet
snippet ijs "javax.swing."  i
import javax.swing.$0;
endsnippet
snippet ijl "javax.swing."  i
import java.lang.Math.*;$0
endsnippet
snippet decimal "java.text.DecimalFormat"  i
import java.text.DecimalFormat;$0
endsnippet

snippet fm "método principal" b
public static void main (String[] args)`!p nl(snip)`{
   $1
}
endsnippet

snippet fsol "método solve" b
public static void solve($1)`!p nl(snip)`{
   $2
}
endsnippet

snippet try "try/catch" b
try {
	$1${VISUAL}
} catch(${2:Exception} ${3:e}){
	${4:e.printStackTrace();}
}
endsnippet

snippet mt "method throws" b
${1:private} ${2:void} ${3:method}($4) ${5:throws $6 }{
	$0
}
endsnippet

snippet fpv  "estructura de métodos" b
${1:public} ${2:void} ${3:nameMethod}($4) {
	$0
}
endsnippet

snippet fdoc "método con JavaDoc" b
/**
 * ${7:Short Description}`!p
for i in getArgs(t[4]):
	snip.rv += "\n\t * @param " + i[1] + " usage..."`
 *`!p
if "throws" in t[5]:
	snip.rv = "\n\t * @throws " + t[6]
else:
	snip.rv = ""``!p
if not "void" in t[2]:
	snip.rv = "\n\t * @return object"
else:
	snip.rv = ""`
 **/
${1:public} ${2:void} ${3:nameMethod}($4) {
	$0
}
endsnippet

## Getter and Setter
snippet get "getter" b
public ${1:String} get${2:Name}() {
	return `!p snip.rv = mixedCase(t[2])`;
}
endsnippet

snippet set "setter" b
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet set-get "setter and getter" b
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}`!p snip.rv += "\n"`
public $2 get$1() {
	return `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

## Salida de datos por consola
snippet s "System.out.print()" b
System.out.print("$1");
endsnippet

snippet ss "System.out.println()"  b
System.out.println($1);
endsnippet

snippet se "System.err.println()"  b
System.err.println($1);
endsnippet

snippet sf "System.out.println()"  b
System.out.printf($1);$0
endsnippet

snippet p "pw.print()"  b
pw.print($1);
endsnippet

snippet pp "pw.println()"  b
pw.println($1);
endsnippet

snippet pf "pw.printf()"  b
pw.printf("%$1", $2);
endsnippet

## Modificadores de acceso
snippet pr "private" b
private $0
endsnippet

snippet po "protected" b
protected $0
endsnippet

snippet pu "public" b
public $0
endsnippet

snippet st "static"
static $0
endsnippet

snippet fi "final" b
final $0
endsnippet

snippet sy "synchronized"
synchronized$0
endsnippet

snippet tc "test case"
public class ${1:`!p snip.rv = snip.basename or "untitled"`} extends ${2:TestCase}`!p nl(snip)`{
	$0
}
endsnippet

snippet t "test" b
`!p junit(snip)`public void test${1:Name}() {
	$0
}
endsnippet

snippet th "throw" b
throw new $0
endsnippet

snippet wh "while" b
while ($1) {
   $2
}
endsnippet

## Otros snippets fundamentales
snippet ar "declarar un arreglo estático" b
${1:int}[] $2 = new ${1:int}[${3:N}];$4
endsnippet

snippet arr "Arrays.funtion()"
Arrays.$1($2);
endsnippet

snippet tostr "Arrays.toString()"
Arrays.toString($1)
endsnippet

snippet sc "Scanner sc = new Scanner(System.in)" b
Scanner sc = new Scanner(System.in);$0
endsnippet

snippet df "DecimalFormat df = new DecimalFormat(###,###.##)" b
DecimalFormat df = new DecimalFormat("#.#########"); // (EA) Error Absolute 10^-9
endsnippet

snippet joi "JOptionPane.showInputDialog()" b
JOptionPane.showInputDialog("$1")
endsnippet

snippet jom "JOptionPane.showMessageDialog()" b
JOptionPane.showMessageDialog(null, "$1");$0
endsnippet

snippet ri "fr.readInt()" b
fr.readInt();
endsnippet

snippet rl "fr.readLong()" b
fr.readLong();
endsnippet

snippet rd "fr.readDouble()" b
fr.readDouble();
endsnippet

snippet ra "fr.readArray()" b
fr.readArray():
endsnippet

snippet rac "fr.next().toCharArray()" b
fr.next().toCharArray();$1
endsnippet

snippet rn "fr.next()" b
fr.next();
endsnippet

snippet rl "fr.readLine()" b
fr.readLine();
endsnippet

snippet parseo "{Type}.parse{Type}()" b
${1:Integer}.parse${2:Int}($0);
endsnippet

snippet .get "getIntance()" b
getInstance();$0
endsnippet

snippet .get "getClass" b
getClass();
endsnippet

snippet .eq "equals(Object)" b
.equals();$0
endsnippet

snippet .toString "pS toString" b
public String toString() {
   return "$1";	
}
endsnippet

snippet pcla "public abstract class nameClass" b
public abstract class`!p snip.rv = snip.basename` extends ${1:parentClass} {

   public abstract void get${2:Name} ();$0
}
endsnippet

snippet ritar "Print invers array" b
System.out.print("\nArreglo Inverso: [");
for (int $1 = ($2.length-1); $1 >= 0; $1--) {
	System.out.print($2[$1] + ", ");

	if ($1 > 0) {
		System.out.print($2[$1] + ", ");
	} else {
		System.out.print($2[$1] + "]");
	}
}
endsnippet

snippet itar "Print iterations of array" b
System.out.print("\nArreglo Original: [");
for (int $1 = 0; $1 < $2.length; $1++) {
	System.out.print($2[$1] + ", ");

	if ($1 > ($2.length - 1)) {
		System.out.print($2[$1] + ", ");
	} else {
		System.out.print($2[$1] + "]");
	}
}
endsnippet

snippet wl "Surround with ReadWriteLock.writeLock" b
$1.writeLock().lock();
try {
	$2
} finally {
	$1.writeLock().unlock();
}
endsnippet

snippet tt "Read test case" b
int tt = fr.readInt();
while (tt-- > 0) {
   $1
}
endsnippet

snippet author "header file" b
/**
 *   author:  josuerom
 *   created: `!v strftime("%d/%m/%Y %H:%M:%S")`
**/
endsnippet

snippet tem1.java "Template 1 Java" b
/**
 *   author:  josuerom
 *   created: `!v strftime("%d/%m/%Y %H:%M:%S")`
**/
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Random;
import java.util.StringTokenizer;
import java.util.Collections;
import static java.lang.Math.*;

public class `!p snip.rv = snip.basename` {
   public static void main(String[] args) {
      FastReader fr = new FastReader();
      PrintWriter pw = new PrintWriter(System.out);
      $1
      pw.flush(); pw.close();
   }

   static final Random random = new Random();
   static final int MOD = 1_000_000_007;
   static final int MAX = 1_000_007;
   static final boolean DEBUG = false;

   static class Treasure {
      public Treasure() { }

      static void ruffleSort(int[] a) {
         int n = a.length;
         for (int i = 0; i < n; i++) {
            int oi = random.nextInt(n), temp = a[oi];
            a[oi] = a[i]; a[i] = temp;
         }
         Arrays.sort(a);
      }

      static long add(long a, long b) {
         return (a+b) % MOD;
      }
      static long sub(long a, long b) {
         return ((a-b) % MOD + MOD) % MOD;
      }
      static long mul(long a, long b) {
         return (a*b) % MOD;
      }
      static long exp(long base, long exp) {
         if (exp==0) return 1;
         long half=exp(base, exp/2);
         if (exp%2==0) return mul(half, half);
         return mul(half, mul(half, base));
      }

      static long[] factorials = new long[2_000_007];
      static long[] invFactorials = new long[2_000_007];

      static void precompFacts() {
         factorials[0] = invFactorials[0] = 1;
         for (int i = 1; i < factorials.length; i++) factorials[i] = mul(factorials[i-1], i);
         invFactorials[factorials.length-1] = exp(factorials[factorials.length-1], MOD-2);
         for (int i = invFactorials.length-2; i >= 0; i--) invFactorials[i] = mul(invFactorials[i+1], i+1);
      }
      static long nCr(int n, int r) {
         return mul(factorials[n], mul(invFactorials[r], invFactorials[n-r]));
      }
   }

   static class FastReader {
      BufferedReader br;
      StringTokenizer st;

      public FastReader() {
         br = new BufferedReader(new InputStreamReader(System.in));
         st = new StringTokenizer("");
      }

      String next() {
         while (!st.hasMoreTokens()) {
            try { st = new StringTokenizer(br.readLine()); }
            catch (IOException e) { e.printStackTrace(); }
         }
         return st.nextToken();
      }
      String readLine() {
         String line = null;
         try { line = br.readLine(); }
         catch (IOException e) { e.printStackTrace(); }
         return line;
      }

      double readDouble() { return Double.parseDouble(next()); }
      long readLong() { return Long.parseLong(next()); }
      int readInt() { return Integer.parseInt(next()); }
      int[] readArray(int n) {
         int[] a = new int[n];
         for (int i = 0; i < n; i++) { a[i] = readInt(); }
         return a;
      }
   }
}
endsnippet

snippet tem2.java "Template 2 Java" b
/**
    ──▀ █▀▀█ █▀▀ █──█ █▀▀ █▀▀█ █▀▀█ █▀▄▀█
    ──█ █──█ ▀▀█ █──█ █▀▀ █▄▄▀ █──█ █─▀─█
    █▄█ ▀▀▀▀ ▀▀▀ ─▀▀▀ ▀▀▀ ▀─▀▀ ▀▀▀▀ ▀───▀
**/
import java.util.Scanner;
import java.util.Arrays;
import static java.lang.Math.*;

public class `!p snip.rv = snip.basename` {
   private static final boolean DEBUG = false;

   public static void main(String[] args) {
      readInput();
   }

   public static void solve(int[] a) {$2
   }

   public static void readInput() {
      Scanner sc = new Scanner(System.in);
      int tt = sc.nextInt();
      while (tt-- > 0) {
         int N = sc.nextInt();
         int vi = new int[N];
         for (int i = 0; i < N$1; i++) {
            vi[i] = sc.nextInt();
         }
         solve(vi);
      }
      sc.close(); System.out.close();
   }
}
endsnippet

snippet tem3.java "Template 3 Java" b
/**
    █▀█ 　 █▀▀▄ ─▀─ ▀▀█▀▀ █▀▀  ▄▀  ▀▄ 
    ─▄▀ 　 █▀▀▄ ▀█▀ ──█── ▀▀█  █─  ─█ 
    █▄▄ 　 ▀▀▀─ ▀▀▀ ──▀── ▀▀▀  ▀▄  ▄▀
**/
import java.util.Scanner;
import java.util.Arrays;
import static java.lang.Math.*;

public class `!p snip.rv = snip.basename` {
   public static void main(String[] args) {
	   Scanner sc = new Scanner(System.in);
	   $1
      sc.close(); System.out.close();
   }
}
endsnippet